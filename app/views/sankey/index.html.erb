<!DOCTYPE html>
<html>
<head>
  <title>Sankey</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-sankey@0.12.3/dist/d3-sankey.min.js"></script>
  <style>
    .node rect { stroke: #000; }
    .node text { font: 14px sans-serif; }
  </style>
</head>
<body>
  <h1>Sankey Pipeline - <%= @month_label %></h1>

  <form method="get" action="/sankey">
    <label for="month">Select Month:</label>
    <select name="month" id="month" onchange="this.form.submit()">
      <% @months.each_with_index do |month, idx| %>
        <option value="<%= idx+1 %>" <%= 'selected' if (idx+1)==params[:month].to_i || (params[:month].blank? && idx==0) %>>
          <%= month[:month] %>
        </option>
      <% end %>
    </select>
  </form>

  <svg width="1200" height="800"></svg>

  <script>
    const graph = {
      nodes: <%= raw @nodes.map { |name| { name: name } }.to_json %>,
      links: <%= raw @links.to_json %>
    };

    const svg = d3.select("svg"),
          width = +svg.attr("width"),
          height = +svg.attr("height");

    const sankey = d3.sankey()
      .nodeWidth(20)
      .nodePadding(30)
      .extent([[1, 1], [width - 1, height - 6]]);

    // Add node positions from our Ruby code
    graph.nodes.forEach((node, i) => {
      node.x = <%= raw @node_x.map { |x| "#{x} * width" }.join(', ') %>[i];
      node.y = <%= raw @node_y.map { |y| "#{y} * height" }.join(', ') %>[i];
    });

    sankey(graph);

    // After layout is calculated, adjust Pending position
    graph.nodes.forEach(node => {
      if (node.name === "Pending") {
        const reviewedNode = graph.nodes.find(n => n.name === "Reviewed");
        if (reviewedNode) {
          // Keep the same y position but match x position with Reviewed
          node.x0 = reviewedNode.x0;
          node.x1 = reviewedNode.x1;
        }
      }
    });

    svg.append("g")
      .selectAll("rect")
      .data(graph.nodes)
      .enter().append("rect")
      .attr("x", d => d.x0)
      .attr("y", d => d.y0)
      .attr("height", d => d.y1 - d.y0)
      .attr("width", d => d.x1 - d.x0)
      .attr("fill", d => {
        // Darker versions of the flow colors for source nodes
        const darkColors = {
          "Indeed": "#14538c",     // Darker version of #1f77b4
          "Facebook": "#b35000",    // Darker version of #ff7f0e
          "Referrals": "#1f701f",  // Darker version of #2ca02c
          "Craigslist": "#961c1c", // Darker version of #d62728
          "Ads": "#602642"         // Darker version of #9467bd (as specified)
        };
        return darkColors[d.name] || "#4682b4";  // Default blue for other nodes
      });

    // Add source labels inside nodes
    svg.append("g")
      .selectAll("text.source-label")
      .data(graph.nodes.filter(d => ["Indeed", "Facebook", "Referrals", "Craigslist", "Ads"].includes(d.name)))
      .enter().append("text")
      .attr("class", "source-label")
      .attr("x", d => d.x0 + (d.x1 - d.x0) / 2)  // Center horizontally
      .attr("y", d => d.y0 + (d.y1 - d.y0) / 2)  // Center vertically
      .attr("dy", "0.35em")
      .attr("text-anchor", "middle")
      .attr("fill", "white")
      .style("font", "12px sans-serif")
      .attr("transform", d => `rotate(90, ${d.x0 + (d.x1 - d.x0) / 2}, ${d.y0 + (d.y1 - d.y0) / 2})`)
      .text(d => d.name);

    svg.append("g")
      .selectAll("path")
      .data(graph.links)
      .enter().append("path")
      .attr("d", d3.sankeyLinkHorizontal())
      .attr("stroke-width", d => d.width)
      .attr("stroke", d => d.color)
      .attr("fill", "none")
      .attr("opacity", 0.5);

    svg.append("g")
      .selectAll("text")
      .data(graph.nodes)
      .enter().append("text")
      .attr("x", d => d.x0 - 6)
      .attr("y", d => (d.y0 + d.y1) / 2)
      .attr("dy", "0.35em")
      .attr("text-anchor", "end")
      .text(d => d.name);
  </script>
</body>
</html>